#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging

import rich.table
import torch
import os
import sys
from halo import Halo
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, TextColumn, BarColumn, FileSizeColumn, TransferSpeedColumn, TimeRemainingColumn
from moosez.constants import (KEY_FOLDER_NAME, KEY_URL, KEY_LIMIT_FOV, VERSION,
                              KEY_DESCRIPTION, KEY_DESCRIPTION_TEXT, KEY_DESCRIPTION_IMAGING, KEY_DESCRIPTION_MODALITY)


# ----------------------------------------------------------------------------------------------------------------------
# Author: Lalith Kumar Shiyam Sundar
# Institution: Medical University of Vienna
# Research Group: Quantitative Imaging and Medical Physics (QIMP) Team
# Date: 13.02.2023
# Version: 2.0.0
#
# Description:
# This module contains the urls and filenames of the models and binaries that are required for the moosez.
#
# Usage:
# The variables in this module can be imported and used in other modules within the moosez to download the necessary
# binaries and models for the moosez.
#
# ----------------------------------------------------------------------------------------------------------------------

# This dictionary holds the pre-trained models available in MooseZ library.
# Each key is a unique model identifier following a specific syntax mentioned:
# 'clin' or 'preclin' (indicating Clinical or Preclinical),
# modality tag (like 'ct', 'pt', 'mr'), and then the tissue of interest.
# To make your model available, add its unique identifier to this list.
# Each value is a dictionary containing the following keys:
#    - url: The URL where the model files can be downloaded.
#    - filename: The filename of the model's zip file.
#    - directory: The directory where the model files will be extracted.
#    - trainer: The type of trainer used to train the model.
#    - voxel_spacing: The voxel spacing used in the model in the form [x, y, z], this is basically the median voxel
#    spacing generated by nnunetv2, and you can find this in the plans.json file of the model.
#    - multilabel_prefix: A prefix to distinguish between different types of labels in multi-label models.
#
# To include your own model, add a new entry to this dictionary following the above format.

MODELS = {
    "clin_ct_lungs": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_lungs_24062023.zip",
        KEY_FOLDER_NAME: "Dataset333_HMS3dlungs",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Lungs",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_organs": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_organs_05082024.zip",
        KEY_FOLDER_NAME: "Dataset123_Organs",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Organs",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "preclin_mr_all": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/preclin_mr_all_05122023.zip",
        KEY_FOLDER_NAME: "Dataset234_minimoose",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "All regions",
                          KEY_DESCRIPTION_IMAGING: "Prelinical",
                          KEY_DESCRIPTION_MODALITY: "MR"}
    },
    "clin_ct_body": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_body_27112023.zip",
        KEY_FOLDER_NAME: "Dataset001_body",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Body, Arms, Legs, Head",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_ribs": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_ribs_11082024.zip",
        KEY_FOLDER_NAME: "Dataset444_Ribs",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Ribs",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_muscles": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_muscles_09082024.zip",
        KEY_FOLDER_NAME: "Dataset555_Muscles",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Muscles",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_peripheral_bones": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_peripheral_bones_05082024.zip",
        KEY_FOLDER_NAME: "Dataset666_Peripheral-Bones",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Peripheral Bones",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_fat": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_fat_31082023.zip",
        KEY_FOLDER_NAME: "Dataset777_Fat",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Fat",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_vertebrae": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_vertebrae_11082024.zip",
        KEY_FOLDER_NAME: "Dataset111_Vertebrae",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Vertebrae",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_cardiac": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_cardiac_09082024.zip",
        KEY_FOLDER_NAME: "Dataset888_Cardiac",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Cardiac",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_digestive": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_digestive_10092023.zip",
        KEY_FOLDER_NAME: "Dataset999_Digestive",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Digestive",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "preclin_ct_legs": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/preclin_ct_legs_05122023.zip",
        KEY_FOLDER_NAME: "Dataset256_Preclin_leg_muscles",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Legs",
                          KEY_DESCRIPTION_IMAGING: "Preclinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_all_bones_v1": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_all_bones_25102023.zip",
        KEY_FOLDER_NAME: "Dataset600_Original_bones",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "All bones",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_PUMA": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_PUMA_1k_23052024.zip",
        KEY_FOLDER_NAME: "Dataset002_PUMA",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "PUMA tissues",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_pt_fdg_brain_v1": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_fdg_pt_brain_v1_17112023.zip",
        KEY_FOLDER_NAME: "Dataset100_Brain_v1",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Brain regions",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_ALPACA": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_ALPACA.zip",
        KEY_FOLDER_NAME: "Dataset080_Alpaca",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "ALPACA tissues",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_PUMA4": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_PUMA4_06032024.zip",
        KEY_FOLDER_NAME: "Dataset003_PUMA4",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "PUMA tissues",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_fast_organs": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_organs_6_02092024.zip",
        KEY_FOLDER_NAME: "Dataset145_Fast_organs",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Organs",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_pt_fdg_tumor": {
        KEY_URL: None,
        KEY_FOLDER_NAME: None,
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: None
    },
    "clin_ct_body_composition": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_body_composition_05092024.zip",
        KEY_FOLDER_NAME: "Dataset778_Body_composition",
        KEY_LIMIT_FOV: {
            "model_to_crop_from": "clin_ct_fast_vertebrae",
            "inference_fov_intensities": [20, 24],
            "label_intensity_to_crop_from": 22,
            "largest_component_only": True
        },
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Body composition on the L3 vertebra region",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    },
    "clin_ct_fast_vertebrae": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_vertebrae3_10092024.zip",
        KEY_FOLDER_NAME: "Dataset112_FastVertebrae",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Vertebrae",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
        },
    "clin_ct_fast_cardiac": {
        KEY_URL: "https://enhance-pet.s3.eu-central-1.amazonaws.com/moose/clin_ct_cardiac3_10092024.zip",
        KEY_FOLDER_NAME: "Dataset890_FastCardiac",
        KEY_LIMIT_FOV: None,
        KEY_DESCRIPTION: {KEY_DESCRIPTION_TEXT: "Cardiac",
                          KEY_DESCRIPTION_IMAGING: "Clinical",
                          KEY_DESCRIPTION_MODALITY: "CT"}
    }
}

AVAILABLE_MODELS = MODELS.keys()


class OutputManager:
    def __init__(self, verbose_console: bool, verbose_log: bool):
        self.verbose_console = verbose_console
        self.verbose_log = verbose_log

        self.console = Console()
        self.logger = None
        self.spinner = None
        self.nnunet_log_filename = os.devnull

    def create_file_progress_bar(self):
        progress_bar = Progress(TextColumn("[bold blue]{task.description}"), BarColumn(bar_width=None),
                                "[progress.percentage]{task.percentage:>3.0f}%", "•", FileSizeColumn(),
                                TransferSpeedColumn(), TimeRemainingColumn(), console=self.console, expand=True,
                                disable=not self.verbose_console)
        return progress_bar

    def create_progress_bar(self):
        progress_bar = Progress(console=self.console, disable=not self.verbose_console)
        return progress_bar

    def create_table(self, header: list[str]) -> rich.table.Table:
        table = Table()
        for header in header:
            table.add_column(header)
        return table

    def configure_logging(self, log_file_directory: str | None):
        if self.verbose_log and not self.logger:
            if log_file_directory is None:
                log_file_directory = os.getcwd()

            self.nnunet_log_filename = os.path.join(log_file_directory, datetime.now().strftime('nnunet_%H-%M-%d-%m-%Y.log'))

            self.logger = logging.getLogger(f'moosez-v{VERSION}')
            self.logger.setLevel(logging.INFO)
            self.logger.propagate = False

            if not any(isinstance(handler, logging.FileHandler) for handler in self.logger.handlers):
                log_format = '%(asctime)s %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s'
                formatter = logging.Formatter(log_format)

                log_filename = os.path.join(log_file_directory, datetime.now().strftime(f'moosez-v{VERSION}_%H-%M-%d-%m-%Y.log'))
                file_handler = logging.FileHandler(log_filename, mode='w')

                file_handler.setLevel(logging.INFO)
                file_handler.setFormatter(formatter)

                self.logger.addHandler(file_handler)

    def log_update(self, text: str):
        if self.verbose_log and self.logger:
            self.logger.info(text)

    def console_update(self, text: str):
        if self.verbose_console:
            if isinstance(text, str):
                print(text)
            else:
                self.console.print(text)

    def configure_spinner(self):
        if self.verbose_console and not self.spinner:
            self.spinner = Halo(text=' Initiating', spinner='dots')

    def spinner_update(self, text: str):
        if self.spinner and self.verbose_console:
            self.spinner.text = text

    def spinner_stop(self):
        if self.spinner:
            self.spinner.stop()

    def spinner_start(self):
        if self.spinner:
            self.spinner.start()

    def spinner_succeed(self, text: str):
        if self.spinner and self.verbose_console:
            self.spinner.succeed(text)


def check_device(output_manager: OutputManager) -> str:
    """
    This function checks the available device for running predictions, considering CUDA and MPS (for Apple Silicon).

    Returns:
        str: The device to run predictions on, either "cpu", "cuda", or "mps".
    """
    # Check for CUDA
    if torch.cuda.is_available():
        device_count = torch.cuda.device_count()
        output_manager.console_update(f" CUDA is available with {device_count} GPU(s). Predictions will be run on GPU.")
        return "cuda"
    # Check for MPS (Apple Silicon) Here for the future but not compatible right now
    elif torch.backends.mps.is_available():
        output_manager.console_update(" Apple MPS backend is available. Predictions will be run on Apple Silicon GPU.")
        return "mps"
    elif not torch.backends.mps.is_built():
        output_manager.console_update(" MPS not available because the current PyTorch install was not built with MPS enabled.")
        return "cpu"
    else:
        output_manager.console_update(" CUDA/MPS not available. Predictions will be run on CPU.")
        return "cpu"


def get_virtual_env_root() -> str:
    """
    Returns the root directory of the virtual environment.

    :return: The root directory of the virtual environment.
    :rtype: str
    """
    python_exe = sys.executable
    virtual_env_root = os.path.dirname(os.path.dirname(python_exe))
    return virtual_env_root


ENVIRONMENT_ROOT_PATH: str = get_virtual_env_root()
MODELS_DIRECTORY_PATH: str = os.path.join(ENVIRONMENT_ROOT_PATH, 'models', 'nnunet_trained_models')
